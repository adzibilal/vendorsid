// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bahan {
  id          String    @id @default(uuid())
  code        String    @unique
  name        String
  description String?
  imageUrl    String?   @map("image_url")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz
  Order       Order[]

  @@map("bahans")
}

model Ukuran {
  id          String        @id @default(uuid())
  code        String        @unique
  name        String
  description String?
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime      @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime?     @map("deleted_at") @db.Timestamptz
  OrderDetail OrderDetail[]

  @@map("ukurans")
}

model Jenis {
  id          String    @id @default(uuid())
  code        String    @unique
  name        String
  description String?
  imageUrl    String?   @map("image_url")
  harga       Int?      @default(0)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz
  Order       Order[]

  @@map("jenis")
}

model Desainer {
  id          String    @id @default(uuid())
  name        String
  phone       String?
  portofolio  String?
  description String?
  imageUrl    String?   @map("image_url")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz

  @@map("desainers")
}

model Learning {
  id          String    @id @default(uuid())
  name        String
  source      String?
  description String?
  thumbnail   String?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz

  @@map("learnings")
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  password      String
  role          String
  phone         String?
  gender        String?
  picture       String?
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime        @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamptz
  orders        Order[]         @relation("UserOrders")
  orderProgress OrderProgress[] @relation("OrderProgress")

  @@map("users")
}

model Order {
  id             String      @id @default(uuid())
  title          String
  invoiceId      String      @map("invoice_id")
  description    String
  linkMockup     String      @map("link_mockup")
  linkCollar     String      @map("link_collar")
  linkLayout     String      @map("link_layout")
  linkSharedrive String      @map("link_sharedrive")
  startAt        DateTime?   @map("start_at")
  finishAt       DateTime?   @map("finish_at")
  totalAmount    Float       @map("total_amount")
  dpAmount       Float       @map("dp_amount")
  status         OrderStatus
  bahanCode      String      @map("bahan_code")
  jenisCode      String      @map("jenis_code")

  shipmentCode     String? @default("JNE") @map("shipment_code")
  shipmentAddress  String? @map("shipment_address")
  settlementAmount Float?  @map("settlement_amount")
  linkTracking     String? @map("link_tracking")

  proofDp         String? @map("proof_dp")
  proofSettlement String? @map("proof_settlement")

  createdBy String    @map("created_by")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  user      User      @relation("UserOrders", fields: [createdBy], references: [id])
  bahan     Bahan     @relation(fields: [bahanCode], references: [code])
  jenis     Jenis     @relation(fields: [jenisCode], references: [code])
  shipments Shipment? @relation(fields: [shipmentCode], references: [code])

  OrderDetail   OrderDetail[]
  OrderProgress OrderProgress[]

  @@map("orders")
}

model OrderDetail {
  id        String    @id @default(uuid())
  orderId   String    @map("order_id")
  quantity  Int
  ukuranId  String    @map("ukuran_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  order  Order  @relation(fields: [orderId], references: [id])
  ukuran Ukuran @relation(fields: [ukuranId], references: [id])

  @@map("order_details")
}

model OrderProgress {
  id           String      @id @default(uuid())
  orderId      String      @map("order_id")
  status       OrderStatus
  linkProgress String?     @map("link_progress")
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz
  createdBy    String      @map("created_by")

  user  User  @relation("OrderProgress", fields: [createdBy], references: [id])
  order Order @relation(fields: [orderId], references: [id])

  @@map("order_progress")
}

model Shipment {
  id          String    @id @default(uuid())
  code        String    @unique
  logo        String?
  title       String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz
  Order       Order[]

  @@map("shipments")
}

enum Role {
  super_admin
  admin
  reseller
  desain_setting
  printing
  pressing
  sewing
  packing
}

enum OrderStatus {
  CANCELLED
  REQUESTED
  APPROVED
  PROOFING
  PROOFING_APPROVED
  DESAIN_SETTING
  PRINTING
  PRESSING
  SEWING
  PACKING
  WAITING_SETTLEMENT
  COMPLETED
}
